v1.transform = CGAffineTransform(rotationAngle:45 * .pi/180)
v1.transform = CGAffineTransform(scaleX:1.8, y:1)
v2.transform = CGAffineTransform(translationX:100, y:0).rotated(by:45 * .pi/180)
v2.transform = CGAffineTransform(rotationAngle:45 * .pi/180).translateBy(x: 100, y: 0)



case 6:
  let v1 = UIView(frame:CGRect(20, 111, 132, 194))
  v1.backgroundColor = UIColor(red: 1, green: 0.4, blue: 1, alpha: 1)
  let v2 = UIView(frame:v1.bounds)
  v2.backgroundColor = UIColor(red: 0.5, green: 1, blue: 0, alpha: 1)
  self.view.addSubview(v1)
  v1.addSubview(v2)

  let r = CGAffineTransform(rotationAngle:45 * .pi/180)
  let t = CGAffineTransform(translationX:100, y:0)
  v2.transform = t.concatenating(r)
  v2.transform = r.inverted().concatenating(v2.transform)

case 7:
  let v1 = UIView(frame:CGRect(113, 111, 132, 194))
  v1.backgroundColor = UIColor(red: 1, green: 0.4, blue: 1, alpha: 1)
  let v2 = UIView(frame:v1.bounds.insetBy(dx: 10, dy: 10))
  v2.backgroundColor = UIColor(red: 0.5, green: 1, blue: 0, alpha: 1)
  self.view.addSubview(v1)
  v1.addSubview(v2)

  v1.transform = CGAffineTransform(a:1, b:0, c:-0.2, d:1, tx:0, ty:0)



v2.autoresizingMask = .flexibleWidth
v3.autoresizingMask = [.flexibleTopMargin, .flexibleLeftMargin]


@IBAction func doTest(_ sender: Any?) {
  UIView.animate(withDuration:0.4, delay: 0, options: .autoreverse, animations: {
  self.v1.transform = CGAffineTransform(scaleX:1.1, y:1.1)
  self.v2.transform = CGAffineTransform(scaleX:1.1, y:1.1)
  }, completion: {
      _ in
      self.v1.transform = .identity
      self.v2.transform = .identity
  })
}



