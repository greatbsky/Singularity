


let vc = self.storyboard!.instantiateViewController(withIdentifier: "vc2")

class RootViewController : UIViewController {
    override var nibName : String {
        get {
            return "RootView" // Note: _not_ "RootViewController" - not stripped magically
        }
    }
}




class RootViewController : UIViewController {
    init() {
        super.init(nibName:"RootViewController", bundle:nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
}






// MARK: - Life Cycle
override func viewDidLoad() {
  super.viewDidLoad()
NotificationCenter.default.addObserver(self, selector: #selector(applicationDidBecomeActive(ntf:)), name: NSNotification.Name.UIApplicationDidBecomeActive, object: nil)
}
// MARK: - 从后台进入前台，更新数据
extension NewsMainViewController {
  
  @objc fileprivate func applicationDidBecomeActive(ntf: Notification) {
    //        if let contentScrollView = bodyScrollView {
    //            contentScrollView.startPullToRefresh()
    //        }
  }
}



// MARK: Alert
extension ViewController {
  
  func showAlertController(result: LoginResult) {
    let alertController = UIAlertController(title: "提示", message: result.description, preferredStyle: .alert)
    let alertAction = UIAlertAction(title: "确定", style: .default, handler: nil)
    alertController.addAction(alertAction)
    self.present(alertController, animated: true, completion: nil)
  }
}


#navigationController?.pushViewController(articleDetailVc, animated: true)



lazy var headerView: JFProfileHeaderView = {
  let headerView = Bundle.main.loadNibNamed("JFProfileHeaderView", owner: nil, options: nil)?.last as! JFProfileHeaderView
  headerView.delegate = self
  headerView.frame = CGRect(x: 0, y: -(SCREEN_HEIGHT * 2 - 265), width: SCREEN_WIDTH, height: SCREEN_HEIGHT * 2)
  return headerView
}()



/**
 头像按钮点击
 */
func didTappedAvatarButton() {
  
  if JFAccountModel.isLogin() {
    let alertC = UIAlertController()
    let takeAction = UIAlertAction(title: "拍照上传", style: UIAlertActionStyle.default, handler: { (action) in
      self.setupImagePicker(.camera)
      self.present(self.imagePickerC, animated: true, completion: {})
    })
    let photoLibraryAction = UIAlertAction(title: "图库选择", style: UIAlertActionStyle.default, handler: { (action) in
      self.setupImagePicker(.photoLibrary)
      self.present(self.imagePickerC, animated: true, completion: {})
    })
    let albumAction = UIAlertAction(title: "相册选择", style: UIAlertActionStyle.default, handler: { (action) in
      self.setupImagePicker(.savedPhotosAlbum)
      self.present(self.imagePickerC, animated: true, completion: {})
    })
    let cancelAction = UIAlertAction(title: "取消", style: UIAlertActionStyle.cancel, handler: { (action) in
      
    })
    alertC.addAction(takeAction)
    alertC.addAction(photoLibraryAction)
    alertC.addAction(albumAction)
    alertC.addAction(cancelAction)
    self.present(alertC, animated: true, completion: {})
  } else {
    present(JFNavigationController(rootViewController: JFLoginViewController(nibName: "JFLoginViewController", bundle: nil)), animated: true, completion: {
    })
  }
}


@IBAction func followMe()
{
  let urlString = "http://weibo.com/yangreal"
  let url =  URL(string: urlString)
  UIApplication.shared.openURL(url!)
}


deinit {
NotificationCenter.default.removeObserver(self)
}



class ViewController: UIViewController {

  @IBOutlet var views : [UIView]!

  override func viewDidLoad() {
    super.viewDidLoad()

    for v in views {
      v.removeFromSuperview()
    }

    // give the stack view arranged subviews

    let sv = UIStackView(arrangedSubviews: views)

    // configure the stack view

    sv.axis = .vertical
    sv.alignment = .fill
    sv.distribution = .equalSpacing

    // constrain the stack view

    sv.translatesAutoresizingMaskIntoConstraints = false
    self.view.addSubview(sv)
    let marg = self.view.layoutMarginsGuide
    let safe = self.view.safeAreaLayoutGuide
    NSLayoutConstraint.activate([
      sv.topAnchor.constraint(equalTo:safe.topAnchor),
      sv.leadingAnchor.constraint(equalTo:marg.leadingAnchor),
      sv.trailingAnchor.constraint(equalTo:marg.trailingAnchor),
      sv.bottomAnchor.constraint(equalTo:self.view.bottomAnchor),
    ])
  }
}

self.additionalSafeAreaInsets = UIEdgeInsets(top: 50, left: 20, bottom: 20, right: 20)
self.view.directionalLayoutMargins = NSDirectionalEdgeInsets(top: 50, leading: 50, bottom: 50, trailing: 50)



@IBAction func doButton(_ g:UIGestureRecognizer) {
let p = g.location(in: g.view)
if let v = g.view!.hitTest(p, with: nil) {
if v == g.view { return }
if v is MyView { return }
DispatchQueue.main.async {
self.grow(v)
}
}
}

func grow(_ v:UIView) {
print("grow \(v)")
v.transform = v.transform.scaledBy(x: 1.2, y:1.2)

}
@IBAction func growLayer(_ g:UIGestureRecognizer) {
print("growLayer")
let v = g.view!
v.layer.transform = CATransform3DScale(v.layer.transform, 1.2, 1.2, 1)
}
